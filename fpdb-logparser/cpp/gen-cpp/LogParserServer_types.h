/**
 * Autogenerated by Thrift Compiler (0.17.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef LogParserServer_TYPES_H
#define LogParserServer_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <functional>
#include <memory>




class Binlog;

typedef struct _Binlog__isset {
  _Binlog__isset() : logs(false) {}
  bool logs :1;
} _Binlog__isset;

class Binlog : public virtual ::apache::thrift::TBase {
 public:

  Binlog(const Binlog&);
  Binlog& operator=(const Binlog&);
  Binlog() noexcept {
  }

  virtual ~Binlog() noexcept;
  std::vector<std::vector<int8_t> >  logs;

  _Binlog__isset __isset;

  void __set_logs(const std::vector<std::vector<int8_t> > & val);

  bool operator == (const Binlog & rhs) const
  {
    if (!(logs == rhs.logs))
      return false;
    return true;
  }
  bool operator != (const Binlog &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Binlog & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(Binlog &a, Binlog &b);

std::ostream& operator<<(std::ostream& out, const Binlog& obj);



#endif
